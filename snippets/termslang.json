{
    "PrintLn Statement": {
        "prefix": "println",
        "body": [
            "println ${1:expression} ~"
        ],
        "description": "Print a line"
    },
    "Print Statement": {
        "prefix": "print",
        "body": [
            "print ${1:expression} ~"
        ],
        "description": "Print a value"
    },
    "Return Statement": {
        "prefix": "return",
        "body": [
            "return ${1:expression} ~"
        ],
        "description": "Return a value"
    },
    "Let Statement": {
        "prefix": "let",
        "body": [
            "let ${1:type} ${2:name} = ${3:expression} ~"
        ],
        "description": "Declare a variable"
    },
    "Update Statement": {
        "prefix": "updt",
        "body": [
            "updt ${1:name} = ${2:expression} ~"
        ],
        "description": "Update a variable"
    },
    "Call Statement": {
        "prefix": "cll",
        "body": [
            "cll  ${1:expression} ~"
        ],
        "description": "Evaluate expression without saving return"
    },
    "Function Declaration": {
        "prefix": "func",
        "body": [
            "func null ${1:name}: ${2:parameters} {",
            "\t$0",
            "}"
        ],
        "description": "Declare a function"
    },
    "Struct Declaration": {
        "prefix": "struct",
        "body": [
            "struct ${1:name} {",
            "\t$0",
            "}"
        ],
        "description": "Declare a struct"
    },
    "Loop": {
        "prefix": "loop",
        "body": [
            "loop ${1:idx}: ${2:conditional} {",
            "\t$0",
            "}"
        ]
    },
    "If Statement": {
        "prefix": "if",
        "body": [
            "if ${1:conditional} {",
            "\t$0",
            "}"
        ]
    },
    "Else Clause": {
        "prefix": "else",
        "body": [
            "else {",
            "\t$0",
            "}"
        ]
    },
    "Else If Statement": {
        "prefix": "elif",
        "body": [
            "else if ${1:conditional} {",
            "\t$0",
            "}"
        ]
    },
    "Import Statement": {
        "prefix": "import",
        "body": [
            "import ${1:name} of \"${2:file}\" ~"
        ]
    },
    "Of Specifyer": {
        "prefix": "of",
        "body": [
            "of \"${1:file}\" ~"
        ]
    }
}